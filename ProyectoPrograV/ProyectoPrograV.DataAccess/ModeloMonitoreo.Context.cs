//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoPrograV.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MonitoreoEntities : DbContext
    {
        public MonitoreoEntities()
            : base("name=MonitoreoEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Componente> Componente { get; set; }
        public virtual DbSet<EncargadoServicio> EncargadoServicio { get; set; }
        public virtual DbSet<EncargadoServidor> EncargadoServidor { get; set; }
        public virtual DbSet<MonitoreoServicio> MonitoreoServicio { get; set; }
        public virtual DbSet<MonitoreoServidor> MonitoreoServidor { get; set; }
        public virtual DbSet<Parametro> Parametro { get; set; }
        public virtual DbSet<ParametroServicio> ParametroServicio { get; set; }
        public virtual DbSet<Servicio> Servicio { get; set; }
        public virtual DbSet<Servidor> Servidor { get; set; }
        public virtual DbSet<Umbral> Umbral { get; set; }
        public virtual DbSet<UmbralComponente> UmbralComponente { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
    
        public virtual ObjectResult<Dashboard_Result> Dashboard(Nullable<int> servidor)
        {
            var servidorParameter = servidor.HasValue ?
                new ObjectParameter("Servidor", servidor) :
                new ObjectParameter("Servidor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dashboard_Result>("Dashboard", servidorParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InicioSesion(string usuario, string contrasena)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InicioSesion", usuarioParameter, contrasenaParameter);
        }
    
        public virtual int Notificaciones(Nullable<int> tipo, string usuario, Nullable<int> codigo, Nullable<int> valor)
        {
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(int));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("valor", valor) :
                new ObjectParameter("valor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notificaciones", tipoParameter, usuarioParameter, codigoParameter, valorParameter);
        }
    
        public virtual ObjectResult<ServicioServidor_Result> ServicioServidor(Nullable<int> servidor)
        {
            var servidorParameter = servidor.HasValue ?
                new ObjectParameter("servidor", servidor) :
                new ObjectParameter("servidor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServicioServidor_Result>("ServicioServidor", servidorParameter);
        }
    
        public virtual ObjectResult<ServidorNombre_Result> ServidorNombre(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServidorNombre_Result>("ServidorNombre", nombreParameter);
        }
    
        public virtual ObjectResult<string> Correos(Nullable<int> valor, Nullable<int> id)
        {
            var valorParameter = valor.HasValue ?
                new ObjectParameter("valor", valor) :
                new ObjectParameter("valor", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Correos", valorParameter, idParameter);
        }
    }
}
